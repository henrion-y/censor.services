// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: censor.proto

package censorPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CensorGrpcServiceClient is the client API for CensorGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CensorGrpcServiceClient interface {
	CensorText(ctx context.Context, in *CensorTextRequest, opts ...grpc.CallOption) (*CensorResultResponse, error)
	CensorImage(ctx context.Context, in *CensorImageRequest, opts ...grpc.CallOption) (*CensorResultResponse, error)
}

type censorGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCensorGrpcServiceClient(cc grpc.ClientConnInterface) CensorGrpcServiceClient {
	return &censorGrpcServiceClient{cc}
}

func (c *censorGrpcServiceClient) CensorText(ctx context.Context, in *CensorTextRequest, opts ...grpc.CallOption) (*CensorResultResponse, error) {
	out := new(CensorResultResponse)
	err := c.cc.Invoke(ctx, "/proto.CensorGrpcService/CensorText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *censorGrpcServiceClient) CensorImage(ctx context.Context, in *CensorImageRequest, opts ...grpc.CallOption) (*CensorResultResponse, error) {
	out := new(CensorResultResponse)
	err := c.cc.Invoke(ctx, "/proto.CensorGrpcService/CensorImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CensorGrpcServiceServer is the server API for CensorGrpcService service.
// All implementations must embed UnimplementedCensorGrpcServiceServer
// for forward compatibility
type CensorGrpcServiceServer interface {
	CensorText(context.Context, *CensorTextRequest) (*CensorResultResponse, error)
	CensorImage(context.Context, *CensorImageRequest) (*CensorResultResponse, error)
	mustEmbedUnimplementedCensorGrpcServiceServer()
}

// UnimplementedCensorGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCensorGrpcServiceServer struct {
}

func (UnimplementedCensorGrpcServiceServer) CensorText(context.Context, *CensorTextRequest) (*CensorResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorText not implemented")
}
func (UnimplementedCensorGrpcServiceServer) CensorImage(context.Context, *CensorImageRequest) (*CensorResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorImage not implemented")
}
func (UnimplementedCensorGrpcServiceServer) mustEmbedUnimplementedCensorGrpcServiceServer() {}

// UnsafeCensorGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CensorGrpcServiceServer will
// result in compilation errors.
type UnsafeCensorGrpcServiceServer interface {
	mustEmbedUnimplementedCensorGrpcServiceServer()
}

func RegisterCensorGrpcServiceServer(s grpc.ServiceRegistrar, srv CensorGrpcServiceServer) {
	s.RegisterService(&CensorGrpcService_ServiceDesc, srv)
}

func _CensorGrpcService_CensorText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CensorGrpcServiceServer).CensorText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CensorGrpcService/CensorText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CensorGrpcServiceServer).CensorText(ctx, req.(*CensorTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CensorGrpcService_CensorImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CensorGrpcServiceServer).CensorImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CensorGrpcService/CensorImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CensorGrpcServiceServer).CensorImage(ctx, req.(*CensorImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CensorGrpcService_ServiceDesc is the grpc.ServiceDesc for CensorGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CensorGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CensorGrpcService",
	HandlerType: (*CensorGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CensorText",
			Handler:    _CensorGrpcService_CensorText_Handler,
		},
		{
			MethodName: "CensorImage",
			Handler:    _CensorGrpcService_CensorImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "censor.proto",
}
